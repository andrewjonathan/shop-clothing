{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDfyao9utp0rJ8jvpkCJRpqfyvxSD5tV_Y\",\n  authDomain: \"react-shop-db-be856.firebaseapp.com\",\n  databaseURL: \"https://react-shop-db-be856.firebaseio.com\",\n  projectId: \"react-shop-db-be856\",\n  storageBucket: \"react-shop-db-be856.appspot.com\",\n  messagingSenderId: \"44830034859\",\n  appId: \"1:44830034859:web:eac024b4b19f0479d120ee\",\n  measurementId: \"G-W8QSZHCX79\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // If the userAuth is null return nothing\n  if (!userAuth) return; // Else\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // To get data simply use snapshot\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user data', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collectionsSnapshot => {\n  const transformedCollection = collectionsSnapshot.docs.map(docSnapshot => {\n    const {\n      title,\n      items\n    } = docSnapshot.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: docSnapshot.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider(); // Signin with selected account on Google\n\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/react/shop-clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collectionsSnapshot","transformedCollection","docs","map","docSnapshot","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyDfyao9utp0rJ8jvpkCJRpqfyvxSD5tV_Y\",\n    authDomain: \"react-shop-db-be856.firebaseapp.com\",\n    databaseURL: \"https://react-shop-db-be856.firebaseio.com\",\n    projectId: \"react-shop-db-be856\",\n    storageBucket: \"react-shop-db-be856.appspot.com\",\n    messagingSenderId: \"44830034859\",\n    appId: \"1:44830034859:web:eac024b4b19f0479d120ee\",\n    measurementId: \"G-W8QSZHCX79\"\n  };\n\n  firebase.initializeApp(config);\n\n  export const createUserProfileDocument = async (userAuth, additionalData) => {\n    // If the userAuth is null return nothing\n    if (!userAuth) return;\n\n    // Else\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    // To get data simply use snapshot\n    const snapShot = await userRef.get();\n\n    if (!snapShot.exists){\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        }catch(error) {\n            console.log('error creating user data', error.message);\n        }\n    }\n\n    return userRef;\n  };\n\n  export const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n      const collectionRef = firestore.collection(collectionKey);\n\n      const batch = firestore.batch();\n      objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc();\n        batch.set(newDocRef, obj);\n      });\n\n      return await batch.commit();\n  }\n\n\n  export const convertCollectionsSnapshotToMap = (collectionsSnapshot) => {\n        const transformedCollection = collectionsSnapshot.docs.map(docSnapshot => {\n            const { title, items } = docSnapshot.data();\n\n            return {\n                routeName: encodeURI(title.toLowerCase()),\n                id: docSnapshot.id,\n                title,\n                items\n            }\n        });\n\n        return transformedCollection.reduce((accumulator, collection) => {\n            accumulator[collection.title.toLowerCase()] = collection;\n            return accumulator;\n        }, {});\n    };\n\n  export const getCurrentUser = () => {\n      return new Promise((resolve, reject) => {\n          const unsubscribe = auth.onAuthStateChanged(userAuth => {\n              unsubscribe();\n              resolve(userAuth);\n          }, reject)\n      });\n  }\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n\n  export const googleProvider = new firebase.auth.GoogleAuthProvider();\n  // Signin with selected account on Google\n  googleProvider.setCustomParameters({ prompt: 'select_account' });\n  export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\n  export default firebase;\n"]},"metadata":{},"sourceType":"module"}